import sklearn.decomposition
import sklearn.multiclass as mcl
from sklearn.multiclass import OneVsRestClassifier
import sklearn.svm as svm
from sklearn.svm import LinearSVC
from sklearn import linear_model
import math

#http://scikit-learn.org/stable/modules/multiclass.html
def oneVRest(x,y,x_test):
    result = OneVsRestClassifier(LinearSVC()).fit(x,y)
    preds = result.predict(x_test)
    return preds

def oneVOne(x,y,x_test):
    result = mcl.OneVsOneClassifier(LinearSVC()).fit(x,y)
    preds = result.predict(x_test)
    return preds

def logRegress(x,y,x_test):
    logreg = linear_model.LogisticRegression()
    preds = logreg.fit(x,y).predict(x_test)
    return preds

def decisionTree(x,y,x_test):
    from sklearn import tree
    clf = tree.DecisionTreeClassifier()
    preds = clf.fit(x.toarray(), y).predict(x_test.toarray())
    return preds

def randomForest(x,y,x_test):
    from sklearn.ensemble import RandomForestClassifier
    clf = RandomForestClassifier()
    preds = clf.fit(x.toarray(), y).predict(x_test.toarray())
    return preds

def extraTrees(x,y,x_test):
    from sklearn.ensemble import ExtraTreesClassifier
    clf = ExtraTreesClassifier()
    preds = clf.fit(x.toarray(), y).predict(x_test.toarray())
    return preds

def classify(x,y,x_test, mode='oneVRest', reduction=None, n_components=10):

    def SVC(x,y,x_test):
        clf = svm.SVC()


    decomp = None
    if reduction=='tsvd':
        print "Decomposing with TruncatedSVD into %d components" % n_components
        decomp = sklearn.decomposition.TruncatedSVD(n_components=n_components)
        decomp.fit(x)
        x = decomp.transform(x)
        x_test = decomp.transform(x_test)

    elif reduction == 'pgnmf':
        print "Decomposing with Projected Gradient NMF into %d components" % n_components
        decomp = sklearn.decomposition.ProjectedGradientNMF(n_components=n_components, sparseness='data')
        decomp.fit(x)
        x = decomp.transform(x)
        x_test = decomp.transform(x_test)


    elif reduction == 'nmf':
        print "Decomposing with NMF into %d components" % n_components
        decomp = sklearn.decomposition.NMF(n_components=n_components, sparseness='data')
        decomp.fit(x)
        x = decomp.transform(x)
        x_test = decomp.transform(x_test)


    modes = {
        'oneVRest': oneVRest,
        'oneVOne': oneVOne,
        'logRegress':logRegress,
        'decisionTree': decisionTree,
        'randomForest': randomForest,
        'extraTrees': extraTrees
    }

    preds = modes[mode](x,y,x_test)
    return preds
